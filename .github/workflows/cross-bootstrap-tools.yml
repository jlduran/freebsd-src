name: Cross-build Kernel

on:
  push:
    branches: [ main, 'stable/14', 'stable/13' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    name: ${{ matrix.target_arch }} ${{ matrix.os }} (${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        target_arch: [ amd64, aarch64 ]
        os: [ ubuntu-20.04, ubuntu-22.04, macos-latest ]
        include:
          - os: ubuntu-20.04
            compiler: clang-12
            pkgs: bmake libarchive-dev clang-12 lld-12
            llvm-bindir: /usr/lib/llvm-12/bin
            llvm-ld: /usr/lib/llvm-12/bin/ld.lld
            # XXX the Ubuntu packaged bmake causes build errors
            bmake: ${GITHUB_WORKSPACE}/tools/build/make.py
          - os: ubuntu-22.04
            compiler: clang-14
            pkgs: bmake libarchive-dev clang-14 lld-14
            llvm-bindir: /usr/lib/llvm-14/bin
            llvm-ld: /usr/lib/llvm-14/bin/ld.lld
            # XXX the Ubuntu packaged bmake causes build errors
            bmake: ${GITHUB_WORKSPACE}/tools/build/make.py
          - os: macos-latest
            compiler: clang-13
            pkgs: bmake libarchive llvm@13
            llvm-bindir: /opt/homebrew/opt/llvm@13/bin
            llvm-ld: /opt/homebrew/opt/llvm@13/bin/ld.lld
            bmake: /opt/homebrew/opt/bmake/bin/bmake
          - target_arch: amd64
            target: amd64
          - target_arch: aarch64
            target: arm64
    steps:
      - uses: actions/checkout@v4
      - name: install packages (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update --quiet || true
          sudo apt-get -yq --no-install-suggests --no-install-recommends install ${{ matrix.pkgs }}
      - name: install packages (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update --quiet || true
          brew install ${{ matrix.pkgs }} || true
      - name: create environment
        run: |
          echo "CC=${{ matrix.llvm-bindir }}/clang" >> $GITHUB_ENV
          echo "CXX=${{ matrix.llvm-bindir }}/clang++" >> $GITHUB_ENV
          echo "CPP=${{ matrix.llvm-bindir }}/clang-cpp" >> $GITHUB_ENV

          echo "XCC=${{ matrix.llvm-bindir }}/clang" >> $GITHUB_ENV
          echo "XCXX=${{ matrix.llvm-bindir }}/clang++" >> $GITHUB_ENV
          echo "XCPP=${{ matrix.llvm-bindir }}/clang-cpp" >> $GITHUB_ENV

          echo "LD=${{ matrix.llvm-ld }}" >> $GITHUB_ENV
          echo "XLD=${{ matrix.llvm-ld }}" >> $GITHUB_ENV

          mkdir -p ../build
          echo "MAKEOBJDIRPREFIX=${PWD%/*}/build" >> $GITHUB_ENV
          # heh, works on Linux/BSD/macOS ...
          echo "NPROC=`getconf _NPROCESSORS_ONLN 2>/dev/null || getconf NPROCESSORS_ONLN 2>/dev/null || echo 1`" >> $GITHUB_ENV

      - name: show environment
        run: |
          echo Running on $(uname -a)
          echo "GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
          echo "Using bmake as ${{ matrix.bmake }}"
          echo Using CC=${CC}
          echo Using CXX=${CXX}
          echo Using CPP=${CPP}
          echo Using XCC=${XCC}
          echo Using XCXX=${XCXX}
          echo Using XCPP=${XCPP}
          echo Using LD=${LD}
          echo Using XLD=${XLD}
          echo Using MAKEOBJDIRPREFIX=${MAKEOBJDIRPREFIX}
          echo Using NPROC=${NPROC}

      - name: make kernel-toolchain
        run: ${{ matrix.bmake }} TARGET=${{ matrix.target }} TARGET_ARCH=${{ matrix.target_arch }} kernel-toolchain -s -j$NPROC -DWITH_DISK_IMAGE_TOOLS_BOOTSTRAP

      - name: make buildkernel
        run: ${{ matrix.bmake }} TARGET=${{ matrix.target }} TARGET_ARCH=${{ matrix.target_arch }} KERNCONF=GENERIC NO_MODULES=yes buildkernel -s -j$NPROC $EXTRA_MAKE_ARGS
